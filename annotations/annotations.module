<?php

use Drupal\Core\Render\Markup;

/**
 * Implements hook_entity_display_build_alter().
 *
 * @param array $build
 * @param array $context
 */
function annotations_entity_display_build_alter(&$build, $context) {

  /** @var \Drupal\Core\Entity\EntityInterface $entity */
  $entity = $context['entity'];
  $entity_type_id = $entity->getEntityTypeId();
  $messenger = \Drupal::messenger();
  //$messenger->addMessage(t($entity_type_id));

  $fields = [];
  switch ($entity_type_id) {
    case 'node':
      $fields = ['title'];
      break;
    case 'comment':
      $fields = ['subject', 'comment_body'];
      break;
    default:
      return;
  }

  foreach (\Drupal::service('entity_field.manager')->getFieldDefinitions($entity_type_id, $entity->bundle()) as $field_name => $field_definition) {
    if (!empty($field_definition->getTargetBundle())) {
      $fields[] = $field_name;
      // $field_definition->getType();
    }
  }

  foreach ($fields as $field) {
    if (empty($build[$field])) {
      continue;
    }
    if ($build[$field][0]['#type'] == 'inline_template') {
      $text = $build[$field][0]['#context']['value'];
      $pattern = '|\[fn:([0-9]+)\]|';
      $text = preg_replace($pattern, '<span class="annotations-footnote" id="$1"></span>' , $text);
      $build[$field][0]['#context']['value'] =  Markup::create($text);

    }
    elseif ($build[$field][0]['#type'] == 'processed_text') {
      $text = $build[$field][0]['#text'];
      $pattern = '|\[fn:([0-9]+)\]|';
      $text = preg_replace($pattern, '<span class="annotations-footnote" id="$1"></span>' , $text);
      $build[$field][0]['#text'] =  Markup::create($text);
    }
  }
}

function annotations_page_attachments_alter(array &$page) {
  $page['#attached']['library'][] = 'annotations/annotations.global';
}



/*
 *
 * https://drupal.stackexchange.com/questions/204433/edit-ckeditors-config-programmatically/220684#220684
if ($filter = FilterFormat::load('basic_html')) {
  if (($filter_html = $filter->filters('filter_html')) && $filter_html->status) {
    $config = $filter_html->getConfiguration();
    $allowed_html = !empty($config['settings']['allowed_html']) ? $config['settings']['allowed_html'] : NULL;
    $matches = [];
    if ($allowed_html && preg_match('/<span ([^>]*)>/', $allowed_html, $matches)) {
      $new_attributes = array_filter(explode(' ', $matches[1]));
      $new_attributes[] = 'target';
      $new_attributes[] = 'title';
      $new_attributes[] = 'class';
      $config['settings']['allowed_html'] = preg_replace('/<a ([^>]*)>/', '<a ' . implode(' ', array_unique($new_attributes)) . '>', $allowed_html);
      $filter->setFilterConfig('filter_html', $config);
      $filter->save();
    }
  }
}*/